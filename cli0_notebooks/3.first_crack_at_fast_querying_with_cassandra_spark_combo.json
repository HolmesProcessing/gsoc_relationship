{"paragraphs":[{"text":"%spark\n\nimport com.datastax.spark.connector._\nimport org.joda.time._\nimport java.util.UUID\nimport org.apache.spark.SparkContext\nimport org.apache.spark.SparkConf\nimport org.apache.spark.rdd.RDD\nimport scala.collection.mutable.ArrayBuffer\nimport play.api.libs.json._\nimport play.api.libs.json.JsPath\nimport play.api.libs.json.Json\nimport org.apache.spark.sql.hive.HiveContext\nimport org.apache.spark.sql.functions.array_contains\nimport org.joda.time.DateTime\nimport play.api.libs.json.Reads\nimport play.api.libs.json.Reads._\nimport play.api.libs.json.Writes\nimport play.api.libs.json.Writes._\nimport play.api.libs.functional.syntax._\nimport org.apache.spark.sql.functions.array_contains\n\n","user":"student","dateUpdated":"2017-06-11T16:58:29+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/text"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport com.datastax.spark.connector._\n\nimport org.joda.time._\n\nimport java.util.UUID\n\nimport org.apache.spark.SparkContext\n\nimport org.apache.spark.SparkConf\n\nimport org.apache.spark.rdd.RDD\n\nimport scala.collection.mutable.ArrayBuffer\n\nimport play.api.libs.json._\n\nimport play.api.libs.json.JsPath\n\nimport play.api.libs.json.Json\n\nimport org.apache.spark.sql.hive.HiveContext\n\nimport org.apache.spark.sql.functions.array_contains\n\nimport org.joda.time.DateTime\n\nimport play.api.libs.json.Reads\n\nimport play.api.libs.json.Reads._\n\nimport play.api.libs.json.Writes\n\nimport play.api.libs.json.Writes._\n\nimport play.api.libs.functional.syntax._\n\nimport org.apache.spark.sql.functions.array_contains\n"}]},"apps":[],"jobName":"paragraph_1497006288015_1053684868","id":"20170609-130448_1861332586","dateCreated":"2017-06-09T13:04:48+0200","dateStarted":"2017-06-11T16:58:29+0200","dateFinished":"2017-06-11T16:58:59+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:148"},{"text":"%md\n\n## Define Methods","user":"student","dateUpdated":"2017-06-11T20:33:21+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Define Methods</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1497006594572_2122161567","id":"20170609-130954_917397268","dateCreated":"2017-06-09T13:09:54+0200","dateStarted":"2017-06-09T14:36:06+0200","dateFinished":"2017-06-09T14:36:06+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:149"},{"text":"%spark\n\nval id = \"7215D5946C6A40E9F0DC569B0A0C3A8D12ECAB5E6FDDE9A86E166F2FFFD13EF3\"\n\ndef get_company_name(input: String) : String = {\n\n    val values= (Json.parse(input) \\ \"version_info\" \\\\ \"value\").map(_.toString)\n    val keys = (Json.parse(input) \\ \"version_info\" \\\\ \"key\").map(_.toString)\n    val companyname = keys.zip(values).filter(x=>(x._1).contains(\"CompanyName\")).map(_._2)\n\n    if (companyname.isEmpty) {\n      return \"NONE\"\n    }\n    return companyname.head.replaceAll(\"\"\"[\"]\"\"\",\"\")\n}\n\n\ndef check_cname(input: String) : Boolean = {\n\n    val noise_array = Array(\"Microsoft Corporation\",\"\",\"NONE\")\n\n    if (noise_array.contains(input)) {\n      return false\n    }\n    return true\n}\n\ndef weight_of_cname(input:String): Double = {\n\n    val known_signers = Array(\"Sun Microsystems, Inc.\",\"Adobe Systems, Inc.\",\"Adobe Systems Incorporated\",\n      \"Macromedia Inc.\")\n    if (known_signers.contains(input)){\n      return 0.25\n    }\n    //if the signer only has the following standard symbols assign 0.5\n    else if (input.matches(\"\"\"[a-zA-Z .,]\"\"\")){\n      return 0.5\n    }\n    //when numbers of other unknown symbols are concerned, increase relevance\n    return 0.75\n}\n\n\ndef get_digitalsig(result: String) : String = {\n\n    val x= (Json.parse(result) \\ \"version_info\" \\\\ \"value\").map(_.toString)\n    val y = (Json.parse(result) \\ \"version_info\" \\\\ \"key\").map(_.toString)\n    val sig = y.zip(x).filter(x=>(x._1).contains(\"Signature\")).map(_._2)\n\n    if (sig.isEmpty) {\n      return \"NONE\"\n    }\n    return sig.head.replaceAll(\"\"\"[\"]\"\"\",\"\")\n}\n","user":"student","dateUpdated":"2017-06-11T16:59:03+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/text"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nid: String = 7215D5946C6A40E9F0DC569B0A0C3A8D12ECAB5E6FDDE9A86E166F2FFFD13EF3\n\nget_company_name: (input: String)String\n\ncheck_cname: (input: String)Boolean\n\nweight_of_cname: (input: String)Double\n\nget_digitalsig: (result: String)String\n"}]},"apps":[],"jobName":"paragraph_1497006792126_547059223","id":"20170609-131312_1877943053","dateCreated":"2017-06-09T13:13:12+0200","dateStarted":"2017-06-11T16:59:03+0200","dateFinished":"2017-06-11T16:59:07+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:150"},{"text":"%md\n\n## Test Current Query Methodology\n","user":"student","dateUpdated":"2017-06-09T14:36:16+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Test Current Query Methodology</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1497009949938_317497113","id":"20170609-140549_1837093277","dateCreated":"2017-06-09T14:05:49+0200","dateStarted":"2017-06-09T14:36:16+0200","dateFinished":"2017-06-09T14:36:16+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:151"},{"text":"%spark\n\nsc.cassandraTable(\"spaperks\",\"staging_table\").cassandraCount\n","user":"student","dateUpdated":"2017-06-11T17:03:33+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/text"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres3: Long = 0\n"}]},"apps":[],"jobName":"paragraph_1497193388985_1641691394","id":"20170611-170308_571918996","dateCreated":"2017-06-11T17:03:08+0200","dateStarted":"2017-06-11T17:03:33+0200","dateFinished":"2017-06-11T17:03:36+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:152"},{"text":"%spark\n\nvar services = ArrayBuffer[String]()\n\nsc.cassandraTable(\"holmes_testing\",\"results\").select(\"service_name\").where(\"sha256 = ?\",id).collect.foreach(x=> services += x.get[String](\"service_name\"))\nservices.distinct\n\nif (services.contains(\"peinfo\")){\n      /*PEHASH Query*/\n    val sample_pehash = (Json.parse(\n                              sc.cassandraTable(\"holmes_testing\",\"results\")\n                                .select(\"sha256\",\"results\")\n                                .where(s\"service_name='peinfo' and sha256='$id'\")\n                                .first\n                                .get[String](\"results\")) \\ \"pehash\")\n                                .asOpt[String].getOrElse(\"Undefined\")\n\n    if (!sample_pehash.equals(\"Undefined\")){\n\n        val queryRDD = sc.cassandraTable(\"holmes_testing\",\"results\")\n                        .select(\"sha256\",\"results\")\n                        .where(\"service_name=?\",\"peinfo\")\n                        .filter(x => (Json.parse(\n                                          x.get[String](\"results\")) \\ \"pehash\")\n                                          .asOpt[String].getOrElse(\"Undefined\")\n                                          .contains(sample_pehash) && !x.get[String](\"sha256\").contains(id))\n\n        queryRDD.collect.foreach(x => sc.parallelize(Seq((UUID.randomUUID(), id, x.get[String](\"sha256\"), new DateTime(),\n                    \"Pehash\",\"query\",1.0))).saveToCassandra(\"spaperks\", \"staging_table\", SomeColumns(\"uuid\",\n                    \"primaryobject\", \"secondaryobject\", \"timestamp\", \"tag\",\"pluginid\", \"weight_pehash\")))\n    }\n\n\n      /*TIMESTAMP Query*/\n    val sample_timestamp = (Json.parse(\n                                    sc.cassandraTable(\"holmes_testing\",\"results\")\n                                      .select(\"sha256\",\"results\")\n                                      .where(s\"service_name='peinfo' and sha256 = '$id'\").first\n                                      .get[String](\"results\")) \\ \"timestamp\" \\ \"timestamp\")\n                                      .asOpt[Long].getOrElse(-1:Long)\n    \n    if(!sample_timestamp.equals(-1:Long)){\n    \n        val queryRDD = sc.cassandraTable(\"holmes_testing\",\"results\")\n                              .select(\"sha256\",\"results\")\n                              .where(\"service_name=?\",\"peinfo\")\n                              .filter(x => (Json.parse(x.get[String](\"results\")) \\ \"timestamp\" \\ \"timestamp\")\n                              .asOpt[Long].getOrElse(-1:Long)\n                                .equals(sample_timestamp) && !x.get[String](\"sha256\").contains(id))\n    \n        queryRDD.collect.foreach(x => sc.parallelize(Seq((UUID.randomUUID(), id, x.get[String](\"sha256\"), new DateTime(),\n                          \"Timestamp\",\"query\",1.0))).saveToCassandra(\"spaperks\", \"staging_table\", SomeColumns(\"uuid\",\n                          \"primaryobject\", \"secondaryobject\", \"timestamp\", \"tag\",\"pluginid\",\"weight_timestamp\")))\n    }\n\n      /*IMPHASH Query*/\n    val sample_imphash = (Json.parse(sc.cassandraTable(\"holmes_testing\",\"results\")\n                              .select(\"sha256\",\"results\")\n                              .where(s\"service_name='peinfo' and sha256 = '$id'\").first\n                              .get[String](\"results\")) \\ \"imphash\")\n                              .asOpt[String].getOrElse(\"Undefined\")\n    \n    if(!sample_imphash.equals(\"Undefined\")){\n    \n        val queryRDD = sc.cassandraTable(\"holmes_testing\",\"results\")\n                              .select(\"sha256\",\"results\")\n                              .where(\"service_name=?\",\"peinfo\")\n                              .filter(x => (Json.parse(x.get[String](\"results\")) \\ \"imphash\")\n                              .asOpt[String].getOrElse(\"Undefined\")\n                                .contains(sample_imphash) && !x.get[String](\"sha256\").contains(id))\n    \n        queryRDD.collect.foreach(x => sc.parallelize(Seq((UUID.randomUUID(), id, x.get[String](\"sha256\"), new DateTime(),\n                         \"Imphash\",\"query\",1.0))).saveToCassandra(\"spaperks\", \"staging_table\", SomeColumns(\"uuid\",\n                          \"primaryobject\", \"secondaryobject\", \"timestamp\", \"tag\",\"pluginid\",\"weight_imphash\")))\n    }\n\n\n\n      /*VersionInfo  CompanyName Query*/\n    val sample_cname = get_company_name(sc.cassandraTable(\"holmes_testing\",\"results\")\n                                            .select(\"sha256\",\"results\")\n                                            .where(s\"service_name='peinfo' and sha256 = '$id'\").first\n                                            .get[String](\"results\"))\n\n      //continue only if sample has a valid name\n    if (check_cname(sample_cname)){\n        //find all the company names that match the sample's\n        val queryRDD = sc.cassandraTable(\"holmes_testing\",\"results\")\n                          .select(\"sha256\",\"results\").where(\"service_name=?\",\"peinfo\")\n                          .filter(x => get_company_name(x.get[String](\"results\")).equals(sample_cname) &&\n                            !x.get[String](\"sha256\").contains(id))\n                          .map(x=> (x.get[String](\"sha256\"), get_company_name(x.get[String](\"results\"))))\n\n        queryRDD.collect.foreach(x=> sc.parallelize(Seq((UUID.randomUUID,id, x._1, new DateTime(),\n          \"CompanyName\", \"query\", weight_of_cname(x._2)))).saveToCassandra(\"spaperks\",\"staging_table\",\n          SomeColumns(\"uuid\",\"primaryobject\",\"secondaryobject\",\"timestamp\",\"tag\",\"pluginid\",\"weight_cname\")))\n    }\n\n\n      /*DigitalSignature Query*/\n\n    val digitsig = get_digitalsig(sc.cassandraTable(\"holmes_testing\",\"results\")\n                                        .select(\"sha256\",\"results\")\n                                        .where(s\"service_name='peinfo' and sha256 = '$id'\").first\n                                        .get[String](\"results\"))\n    \n    if(!digitsig.equals(\"NONE\")){\n    \n        val queryRDD = sc.cassandraTable(\"holmes_testing\",\"results\")\n                              .select(\"sha256\",\"results\").where(\"service_name=?\",\"peinfo\")\n                                .filter(x=> get_digitalsig(x.get[String](\"results\")).equals(digitsig)\n                                && !x.get[String](\"sha256\").contains(id))\n    \n    \n        queryRDD.collect.foreach(x=> sc.parallelize(Seq((UUID.randomUUID,id, x.get[String](\"sha256\"), new DateTime(),\n              \"DigitalSignature\", \"query\", 1.0))).saveToCassandra(\"spaperks\",\"staging_table\",\n              SomeColumns(\"uuid\",\"primaryobject\",\"secondaryobject\",\"timestamp\",\"tag\",\"pluginid\",\"weight_digitalsig\")))\n    }\n\n}\n\n","user":"student","dateUpdated":"2017-06-11T17:25:35+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/text"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nservices: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer()\n\nres12: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer(peid, yara, virustotal, peinfo)\n"}]},"apps":[],"jobName":"paragraph_1497007162862_838245742","id":"20170609-131922_2011621462","dateCreated":"2017-06-09T13:19:22+0200","dateStarted":"2017-06-11T17:25:35+0200","dateFinished":"2017-06-11T17:33:40+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:153"},{"text":"%md\n\n#### current methodology: total ~ 10 minutes; < 1 minute for the querying; 9 minutes for storage\n","user":"student","dateUpdated":"2017-06-09T14:41:45+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>current methodology: total ~ 10 minutes; &lt; 1 minute for the querying; 9 minutes for storage</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1497006946885_1356781634","id":"20170609-131546_1339096518","dateCreated":"2017-06-09T13:15:46+0200","dateStarted":"2017-06-09T14:41:45+0200","dateFinished":"2017-06-09T14:41:45+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:154"},{"text":"%spark\n\nsc.cassandraTable(\"gsoc1\",\"results\").cassandraCount\n","user":"student","dateUpdated":"2017-06-12T14:01:19+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/text"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres4: Long = 1476\n"}]},"apps":[],"jobName":"paragraph_1497011855595_-996341592","id":"20170609-143735_815196521","dateCreated":"2017-06-09T14:37:35+0200","dateStarted":"2017-06-12T14:01:19+0200","dateFinished":"2017-06-12T14:01:23+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:155"},{"text":"%spark\n","user":"student","dateUpdated":"2017-06-11T17:08:48+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/text"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1497193728389_-650539096","id":"20170611-170848_700170373","dateCreated":"2017-06-11T17:08:48+0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:156"}],"name":"GSoC_Dona/3.fast_querying_cassandra_spark_combo","id":"2CMP9NWAZ","angularObjects":{"2CJXQF6PE:shared_process":[],"2CHP4H8NN:shared_process":[],"2CJEBQZ28:shared_process":[],"2CJMER2G1:shared_process":[],"2CHG5RU7U:shared_process":[],"2CHRJQ57S:shared_process":[],"2CJX819TK:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}